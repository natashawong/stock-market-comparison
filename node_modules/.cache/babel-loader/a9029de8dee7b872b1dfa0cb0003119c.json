{"ast":null,"code":"var _jsxFileName = \"/Users/natashawong/Desktop/stock-market-comparison/src/Chart/ChartData.js\";\nimport React, { Component } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend } from 'recharts';\nimport { timeConverterUtil, momentManipulations } from '../util/util';\n\nconst axios = require('axios');\n\nexport default class ChartData extends Component {\n  constructor(props) {\n    super(props);\n    this.currency = \"SGD\" || \"USD\";\n    this.timeScale = \"1d\" || \"1wk\" || \"1mo\";\n    this.timePeriod2 = momentManipulations.today;\n    this.timePeriod1 = momentManipulations.monthBefore;\n    this.frequency = \"1mo\";\n\n    this.legendText = value => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: '#a8b2bb'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 16\n        }\n      }, value);\n    };\n\n    this.state = {\n      data: []\n    };\n  } // Chart options\n\n\n  renderTimeAndCurrency() {\n    this.currency = this.props.selectedCurrency === 0 ? \"SGD\" : \"USD\";\n\n    switch (this.props.selectedTime) {\n      // 1 month\n      case 0:\n        this.timePeriod1 = momentManipulations.monthBefore;\n        this.timeScale = \"withinYTD\";\n        this.frequency = \"1d\";\n        break;\n      // 6 months\n\n      case 1:\n        this.timePeriod1 = momentManipulations.six_monthBefore;\n        this.timeScale = \"withinYTD\";\n        this.frequency = \"1wk\";\n        break;\n      // Year-to-date\n\n      case 2:\n        this.timePeriod1 = momentManipulations.yearToDate;\n        this.timeScale = \"withinYTD\";\n        this.frequency = \"1wk\";\n        break;\n      // 1 year\n\n      case 3:\n        this.timePeriod1 = momentManipulations.yearBefore;\n        this.timeScale = \"afterYTD\";\n        this.frequency = \"1mo\";\n        break;\n      // 5 years\n\n      case 4:\n        this.timePeriod1 = momentManipulations.five_yearBefore;\n        this.timeScale = \"afterYTD\";\n        break;\n      // Max\n\n      case 5:\n        this.timePeriod1 = momentManipulations.maxBefore;\n        this.timeScale = \"afterYTD\";\n        break;\n      // 1 month as default\n\n      default:\n        this.timePeriod1 = momentManipulations.monthBefore;\n        this.timeScale = \"withinYTD\";\n        break;\n    }\n  }\n\n  getData() {\n    const tempData = [];\n    this.renderTimeAndCurrency();\n    const frequency = this.frequency;\n    const timePeriod1 = this.timePeriod1;\n    const timePeriod2 = this.timePeriod2;\n    const currency = this.currency; // API options\n\n    const url = \"https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-historical-data\";\n    const headers = {\n      \"content-type\": \"application/octet-stream\",\n      \"x-rapidapi-host\": \"apidojo-yahoo-finance-v1.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"9e901d7e23msh1a11b2cabdd5037p1538d9jsn8030aa49c4df\"\n    };\n\n    function SAdata() {\n      return axios({\n        \"method\": \"GET\",\n        \"url\": url,\n        \"headers\": headers,\n        \"params\": {\n          \"frequency\": frequency,\n          \"filter\": \"history\",\n          \"period1\": timePeriod1,\n          \"period2\": timePeriod2,\n          \"symbol\": \"AAPL\"\n        }\n      });\n    }\n\n    function VTSMX() {\n      return axios({\n        \"method\": \"GET\",\n        \"url\": url,\n        \"headers\": headers,\n        \"params\": {\n          \"frequency\": frequency,\n          \"filter\": \"history\",\n          \"period1\": timePeriod1,\n          \"period2\": timePeriod2,\n          \"symbol\": \"VTSMX\"\n        }\n      });\n    }\n\n    Promise.all([SAdata(), VTSMX()]).then(axios.spread((SA, SMX) => {\n      const SAprices = SA.data.prices;\n      const SMXprices = SMX.data.prices;\n\n      for (var i = 0; i < SMXprices.length; i++) {\n        if (currency === \"USD\") {\n          var _SAprices$i, _SAprices$i2, _SMXprices$i;\n\n          // multipliers normalize to 100k\n          const SAmultiplier = 100000 / SAprices[SAprices.length - 1].close;\n          const SMXmultiplier = 100000 / SMXprices[SMXprices.length - 1].close;\n          tempData.push({\n            date: timeConverterUtil((_SAprices$i = SAprices[i]) === null || _SAprices$i === void 0 ? void 0 : _SAprices$i.date, this.timeScale),\n            SA: Math.round(((_SAprices$i2 = SAprices[i]) === null || _SAprices$i2 === void 0 ? void 0 : _SAprices$i2.close) * SAmultiplier),\n            SMX: Math.round(((_SMXprices$i = SMXprices[i]) === null || _SMXprices$i === void 0 ? void 0 : _SMXprices$i.close) * SMXmultiplier)\n          });\n        } else if (currency === \"SGD\") {\n          var _SAprices$i3, _SAprices$i4, _SMXprices$i2;\n\n          const SAmultiplierSGD = 100000 / (1.45 * SAprices[SAprices.length - 1].close);\n          const SMXmultiplierSGD = 100000 / (1.45 * SMXprices[SMXprices.length - 1].close);\n          tempData.push({\n            date: timeConverterUtil((_SAprices$i3 = SAprices[i]) === null || _SAprices$i3 === void 0 ? void 0 : _SAprices$i3.date, this.timeScale),\n            SA: Math.round(1.45 * ((_SAprices$i4 = SAprices[i]) === null || _SAprices$i4 === void 0 ? void 0 : _SAprices$i4.close) * SAmultiplierSGD),\n            SMX: Math.round(1.45 * ((_SMXprices$i2 = SMXprices[i]) === null || _SMXprices$i2 === void 0 ? void 0 : _SMXprices$i2.close) * SMXmultiplierSGD)\n          });\n        }\n      } // API returns data from most recent to oldest, so reverse is used\n\n\n      this.setState({\n        data: tempData.reverse()\n      });\n    })).catch(error => {\n      console.log(error);\n    });\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedTime !== this.props.selectedTime || prevProps.selectedCurrency !== this.props.selectedCurrency) {\n      this.getData();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LineChart, {\n      data: this.state.data,\n      margin: {\n        left: 65\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      vertical: false,\n      stroke: \"#a8b2bb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"SA\",\n      stroke: \"#3bb7dd\",\n      id: \"SA\",\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"SMX\",\n      stroke: \"#dcac3d\",\n      dot: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"date\",\n      minTickGap: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      width: 40,\n      axisLine: false,\n      tickMargin: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      formatter: this.legendText,\n      payload: [{\n        value: 'Apple',\n        color: \"#3bb7dd\",\n        type: 'line',\n        id: \"SA\"\n      }, {\n        value: 'VTSMX (Stock)',\n        color: '#dcac3d',\n        type: 'line',\n        id: 'SMX'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/natashawong/Desktop/stock-market-comparison/src/Chart/ChartData.js"],"names":["React","Component","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","CartesianGrid","Legend","timeConverterUtil","momentManipulations","axios","require","ChartData","constructor","props","currency","timeScale","timePeriod2","today","timePeriod1","monthBefore","frequency","legendText","value","color","state","data","renderTimeAndCurrency","selectedCurrency","selectedTime","six_monthBefore","yearToDate","yearBefore","five_yearBefore","maxBefore","getData","tempData","url","headers","SAdata","VTSMX","Promise","all","then","spread","SA","SMX","SAprices","prices","SMXprices","i","length","SAmultiplier","close","SMXmultiplier","push","date","Math","round","SAmultiplierSGD","SMXmultiplierSGD","setState","reverse","catch","error","console","log","componentDidMount","componentDidUpdate","prevProps","render","left","type","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Legend } from 'recharts';\nimport { timeConverterUtil, momentManipulations } from '../util/util';\n\nconst axios = require('axios');\n\nexport default class ChartData extends Component {    \n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }  \n\n    // Chart options\n    currency = \"SGD\" || \"USD\"\n    timeScale = \"1d\" || \"1wk\" || \"1mo\"\n    timePeriod2 = momentManipulations.today\n    timePeriod1 = momentManipulations.monthBefore\n    frequency = \"1mo\"\n\n    renderTimeAndCurrency() {\n        this.currency = this.props.selectedCurrency === 0 ? \"SGD\" : \"USD\"\n        switch (this.props.selectedTime) {\n            // 1 month\n            case 0:\n                this.timePeriod1 = momentManipulations.monthBefore\n                this.timeScale = \"withinYTD\";\n                this.frequency = \"1d\";\n                break;\n            // 6 months\n            case 1: \n                this.timePeriod1 = momentManipulations.six_monthBefore\n                this.timeScale = \"withinYTD\";\n                this.frequency = \"1wk\"\n                break\n            // Year-to-date\n            case 2:\n                this.timePeriod1 = momentManipulations.yearToDate\n                this.timeScale = \"withinYTD\";\n                this.frequency = \"1wk\"\n                break\n            // 1 year\n            case 3:\n                this.timePeriod1 = momentManipulations.yearBefore\n                this.timeScale = \"afterYTD\";\n                this.frequency = \"1mo\"\n                break\n            // 5 years\n            case 4:\n                this.timePeriod1 = momentManipulations.five_yearBefore\n                this.timeScale = \"afterYTD\";\n                break\n            // Max\n            case 5:\n                this.timePeriod1 = momentManipulations.maxBefore\n                this.timeScale = \"afterYTD\";\n                break\n            // 1 month as default\n            default:\n                this.timePeriod1 = momentManipulations.monthBefore\n                this.timeScale = \"withinYTD\";\n                break;\n            }\n        }\n\n    getData() {\n        const tempData = []\n        this.renderTimeAndCurrency();\n        const frequency = this.frequency\n        const timePeriod1 = this.timePeriod1\n        const timePeriod2 = this.timePeriod2\n        const currency = this.currency\n\n        // API options\n        const url = \"https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-historical-data\"\n        const headers = {\n            \"content-type\":\"application/octet-stream\",\n            \"x-rapidapi-host\":\"apidojo-yahoo-finance-v1.p.rapidapi.com\",\n            \"x-rapidapi-key\":\"9e901d7e23msh1a11b2cabdd5037p1538d9jsn8030aa49c4df\"\n        }\n\n        function SAdata() {\n            return axios({\n                \"method\":\"GET\", \"url\": url, \"headers\": headers,\n                \"params\": {\n                    \"frequency\": frequency,\n                    \"filter\": \"history\",\n                    \"period1\": timePeriod1,\n                    \"period2\": timePeriod2,\n                    \"symbol\": \"AAPL\",\n                },\n            })\n        }\n\n        function VTSMX() {\n            return axios({\n                \"method\":\"GET\", \"url\": url, \"headers\": headers,\n                \"params\":{\n                    \"frequency\": frequency,\n                    \"filter\":\"history\",\n                    \"period1\":timePeriod1,\n                    \"period2\":timePeriod2,\n                    \"symbol\":\"VTSMX\"\n                }\n            })\n        } \n\n        Promise.all([SAdata(), VTSMX()])\n        .then(axios.spread((SA, SMX) => {\n            const SAprices = SA.data.prices\n            const SMXprices = SMX.data.prices\n\n            for (var i = 0; i < SMXprices.length; i++) {\n\n                if (currency === \"USD\") {\n                    // multipliers normalize to 100k\n                    const SAmultiplier = 100000/(SAprices[SAprices.length-1].close)\n                    const SMXmultiplier = 100000/(SMXprices[SMXprices.length-1].close)\n                    \n                    tempData.push({\n                        date: timeConverterUtil(SAprices[i]?.date, this.timeScale),\n                        SA: Math.round((SAprices[i]?.close) * SAmultiplier),\n                        SMX: Math.round((SMXprices[i]?.close) * SMXmultiplier),\n                    })\n\n                } else if (currency === \"SGD\") {\n                    const SAmultiplierSGD = 100000/(1.45 * (SAprices[SAprices.length-1].close))\n                    const SMXmultiplierSGD = 100000/(1.45 * (SMXprices[SMXprices.length-1].close))\n                    \n                    tempData.push({\n                        date: timeConverterUtil(SAprices[i]?.date, this.timeScale),\n                        SA: Math.round((1.45 * SAprices[i]?.close) * SAmultiplierSGD),\n                        SMX: Math.round((1.45 * SMXprices[i]?.close) * SMXmultiplierSGD),\n                    })\n                }\n            }\n\n            // API returns data from most recent to oldest, so reverse is used\n            this.setState({data: tempData.reverse()})\n        }))\n        .catch((error)=>{\n            console.log(error)\n        })\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n\tcomponentDidUpdate(prevProps) { \n        if (prevProps.selectedTime !== this.props.selectedTime || prevProps.selectedCurrency !== this.props.selectedCurrency) {\n            this.getData()\n        }\n    }\n\n    legendText = (value) => {\n        return <span style={{color: '#a8b2bb'}}>{value}</span>;\n    }\n\n\trender() {\n\t\treturn (\n            <ResponsiveContainer>\n            <LineChart data={this.state.data} margin={{left: 65}}>\n                <CartesianGrid vertical={false} stroke=\"#a8b2bb\"/>\n                <Line type=\"monotone\" dataKey=\"SA\" stroke=\"#3bb7dd\" id=\"SA\" dot={false} />\n                <Line type=\"monotone\" dataKey=\"SMX\" stroke='#dcac3d' dot={false} />\n                <XAxis dataKey=\"date\" minTickGap={5}/>\n                <YAxis width={40} axisLine={false} tickMargin={20}/>\n                <Legend \n                    formatter={this.legendText} \n                    payload={[{ value: 'Apple', color: \"#3bb7dd\", type: 'line', id:\"SA\"}, \n                    {value: 'VTSMX (Stock)', color: '#dcac3d', type: 'line', id:'SMX' }]}\n                />\n                <Tooltip />\n            </LineChart>  \n            </ResponsiveContainer>\n\t\t);\n    }\n}"]},"metadata":{},"sourceType":"module"}